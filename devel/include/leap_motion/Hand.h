// Generated by gencpp from file leap_motion/Hand.msg
// DO NOT EDIT!


#ifndef LEAP_MOTION_MESSAGE_HAND_H
#define LEAP_MOTION_MESSAGE_HAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Point.h>
#include <leap_motion/Finger.h>
#include <leap_motion/Gesture.h>
#include <leap_motion/Arm.h>

namespace leap_motion
{
template <class ContainerAllocator>
struct Hand_
{
  typedef Hand_<ContainerAllocator> Type;

  Hand_()
    : header()
    , lmc_hand_id(0)
    , is_present(false)
    , valid_gestures(false)
    , time_visible(0.0)
    , confidence(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , direction()
    , normal()
    , grab_strength(0.0)
    , pinch_strength(0.0)
    , palm_velocity()
    , palm_center()
    , palm_width(0.0)
    , sphere_radius(0.0)
    , sphere_center()
    , to_string()
    , finger_list()
    , gesture_list()
    , arm()  {
    }
  Hand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lmc_hand_id(0)
    , is_present(false)
    , valid_gestures(false)
    , time_visible(0.0)
    , confidence(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , direction(_alloc)
    , normal(_alloc)
    , grab_strength(0.0)
    , pinch_strength(0.0)
    , palm_velocity(_alloc)
    , palm_center(_alloc)
    , palm_width(0.0)
    , sphere_radius(0.0)
    , sphere_center(_alloc)
    , to_string(_alloc)
    , finger_list(_alloc)
    , gesture_list(_alloc)
    , arm(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _lmc_hand_id_type;
  _lmc_hand_id_type lmc_hand_id;

   typedef uint8_t _is_present_type;
  _is_present_type is_present;

   typedef uint8_t _valid_gestures_type;
  _valid_gestures_type valid_gestures;

   typedef float _time_visible_type;
  _time_visible_type time_visible;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _direction_type;
  _direction_type direction;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _normal_type;
  _normal_type normal;

   typedef float _grab_strength_type;
  _grab_strength_type grab_strength;

   typedef float _pinch_strength_type;
  _pinch_strength_type pinch_strength;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _palm_velocity_type;
  _palm_velocity_type palm_velocity;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _palm_center_type;
  _palm_center_type palm_center;

   typedef float _palm_width_type;
  _palm_width_type palm_width;

   typedef float _sphere_radius_type;
  _sphere_radius_type sphere_radius;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _sphere_center_type;
  _sphere_center_type sphere_center;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _to_string_type;
  _to_string_type to_string;

   typedef std::vector< ::leap_motion::Finger_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::leap_motion::Finger_<ContainerAllocator> >::other >  _finger_list_type;
  _finger_list_type finger_list;

   typedef std::vector< ::leap_motion::Gesture_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::leap_motion::Gesture_<ContainerAllocator> >::other >  _gesture_list_type;
  _gesture_list_type gesture_list;

   typedef  ::leap_motion::Arm_<ContainerAllocator>  _arm_type;
  _arm_type arm;





  typedef boost::shared_ptr< ::leap_motion::Hand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leap_motion::Hand_<ContainerAllocator> const> ConstPtr;

}; // struct Hand_

typedef ::leap_motion::Hand_<std::allocator<void> > Hand;

typedef boost::shared_ptr< ::leap_motion::Hand > HandPtr;
typedef boost::shared_ptr< ::leap_motion::Hand const> HandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leap_motion::Hand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leap_motion::Hand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace leap_motion

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'leap_motion': ['/home/asa/ygc_ur/src/leap_motion/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion::Hand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion::Hand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leap_motion::Hand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leap_motion::Hand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion::Hand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion::Hand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leap_motion::Hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9054fd3f5821eae3259c31fe94fd08a4";
  }

  static const char* value(const ::leap_motion::Hand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9054fd3f5821eae3ULL;
  static const uint64_t static_value2 = 0x259c31fe94fd08a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::leap_motion::Hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leap_motion/Hand";
  }

  static const char* value(const ::leap_motion::Hand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leap_motion::Hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
# A unique ID assigned to this Hand object\n\
int32 lmc_hand_id\n\
\n\
# This changed to between true/false depending if there's a hand detected in the LMC frame\n\
bool is_present\n\
\n\
# This changed to between true/false depending if there's a hand detected in the LMC frame\n\
bool valid_gestures\n\
\n\
# The duration of time this Hand has been visible to the Leap Motion Controller. \n\
float32 time_visible\n\
\n\
# How confident we are with a given hand pose. \n\
# The confidence level ranges between 0.0 and 1.0 inclusive.\n\
float32 confidence\n\
\n\
# The following three angles are in radians!\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
\n\
# The direction vector\n\
geometry_msgs/Vector3 direction\n\
\n\
# The normal vector\n\
geometry_msgs/Vector3 normal\n\
\n\
# The angle between the fingers and the hand of a grab hand pose. \n\
# In radians\n\
float32 grab_strength\n\
\n\
# The distance between the thumb and index finger of a pinch hand pose. \n\
float32 pinch_strength\n\
\n\
# The rate of change of the palm position in meters/second. \n\
float32[] palm_velocity\n\
\n\
# The center position of the palm in meters from the Leap Motion Controller origin. \n\
geometry_msgs/Point palm_center\n\
\n\
# The estimated width of the palm when the hand is in a flat position. \n\
float32 palm_width\n\
\n\
# The radius (m) of a sphere fit to the curvature of this hand. \n\
float32 sphere_radius\n\
\n\
# The center of a sphere fit to the curvature of this hand. \n\
float32[] sphere_center\n\
\n\
# A string containing a brief, human readable description of the Hand object. \n\
string to_string \n\
\n\
# A list of fingers and gestures associated with this hand\n\
Finger[] finger_list\n\
Gesture[] gesture_list\n\
\n\
# The arm associated with this hand\n\
Arm arm\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: leap_motion/Finger\n\
std_msgs/Header header\n\
\n\
# A unique id given to this finger\n\
int32 lmc_finger_id\n\
\n\
# The name of this finger. \n\
uint8 type\n\
\n\
# The estimated length of the finger in meters. \n\
float32 length\n\
\n\
# The estimated width of the finger in meters.\n\
float32 width\n\
\n\
# A string containing a brief, human readable description of the Finger object. \n\
string to_string\n\
\n\
# List of bones associated with this finger\n\
Bone[] bone_list\n\
================================================================================\n\
MSG: leap_motion/Bone\n\
std_msgs/Header header\n\
\n\
# The name of this bone. \n\
uint8 type\n\
\n\
# The estimated length of the bone in meters.\n\
float32 length\n\
\n\
# The estimated with of the bone in meters.\n\
float32 width\n\
\n\
# A string containing a brief, human readable description of the Bone object. \n\
string to_string\n\
\n\
# The base of the bone, closest to the wrist. \n\
geometry_msgs/Pose bone_start\n\
\n\
# The end of the bone, closest to the finger tip. \n\
geometry_msgs/Pose bone_end\n\
\n\
# The midpoint of the bone. \n\
float32[] center\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: leap_motion/Gesture\n\
# A unique id given to this gesture\n\
int32 lmc_gesture_id\n\
\n\
# Reports whether this Gesture instance represents a valid Gesture. \n\
bool is_valid\n\
\n\
# The elapsed duration of the recognized movement up to the frame containing this \n\
# Gesture object, in microseconds. \n\
int64 duration_us\n\
\n\
# The elapsed duration in seconds.\n\
float32 duration_s\n\
\n\
# Recognized movements occur over time and have a beginning, a middle, and an end. \n\
# The 'state' attribute reports where in that sequence this Gesture object falls.\n\
int32 gesture_state\n\
### STATE_INVALID == -1\n\
### STATE_START == 1\n\
### STATE_UPDATE == 2\n\
### STATE_STOP == 3\n\
\n\
# The supported types of gestures. \n\
int32 gesture_type\n\
### TYPE_INVALID == -1\n\
### TYPE_SWIPE == 1\n\
### TYPE_CIRCLE == 4\n\
### TYPE_SCREEN_TAP == 5\n\
### TYPE_KEY_TAP == 6\n\
\n\
# A string containing a brief, human-readable description of this Gesture. \n\
string to_string\n\
\n\
# The list of fingers, tools ids associated with this Gesture, if any. \n\
int32[] pointable_ids\n\
\n\
\n\
================================================================================\n\
MSG: leap_motion/Arm\n\
std_msgs/Header header\n\
\n\
# The position and orientation of the elbow. \n\
geometry_msgs/Pose elbow\n\
\n\
# The position and orientation of the wrist. \n\
geometry_msgs/Pose wrist\n\
\n\
# The midpoint of the forearm. \n\
float32[] center\n\
\n\
# The direction vector of the forearm\n\
geometry_msgs/Vector3 direction\n\
";
  }

  static const char* value(const ::leap_motion::Hand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leap_motion::Hand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lmc_hand_id);
      stream.next(m.is_present);
      stream.next(m.valid_gestures);
      stream.next(m.time_visible);
      stream.next(m.confidence);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.direction);
      stream.next(m.normal);
      stream.next(m.grab_strength);
      stream.next(m.pinch_strength);
      stream.next(m.palm_velocity);
      stream.next(m.palm_center);
      stream.next(m.palm_width);
      stream.next(m.sphere_radius);
      stream.next(m.sphere_center);
      stream.next(m.to_string);
      stream.next(m.finger_list);
      stream.next(m.gesture_list);
      stream.next(m.arm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Hand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leap_motion::Hand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leap_motion::Hand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lmc_hand_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lmc_hand_id);
    s << indent << "is_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_present);
    s << indent << "valid_gestures: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid_gestures);
    s << indent << "time_visible: ";
    Printer<float>::stream(s, indent + "  ", v.time_visible);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "direction: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.direction);
    s << indent << "normal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.normal);
    s << indent << "grab_strength: ";
    Printer<float>::stream(s, indent + "  ", v.grab_strength);
    s << indent << "pinch_strength: ";
    Printer<float>::stream(s, indent + "  ", v.pinch_strength);
    s << indent << "palm_velocity[]" << std::endl;
    for (size_t i = 0; i < v.palm_velocity.size(); ++i)
    {
      s << indent << "  palm_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.palm_velocity[i]);
    }
    s << indent << "palm_center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.palm_center);
    s << indent << "palm_width: ";
    Printer<float>::stream(s, indent + "  ", v.palm_width);
    s << indent << "sphere_radius: ";
    Printer<float>::stream(s, indent + "  ", v.sphere_radius);
    s << indent << "sphere_center[]" << std::endl;
    for (size_t i = 0; i < v.sphere_center.size(); ++i)
    {
      s << indent << "  sphere_center[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sphere_center[i]);
    }
    s << indent << "to_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.to_string);
    s << indent << "finger_list[]" << std::endl;
    for (size_t i = 0; i < v.finger_list.size(); ++i)
    {
      s << indent << "  finger_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::leap_motion::Finger_<ContainerAllocator> >::stream(s, indent + "    ", v.finger_list[i]);
    }
    s << indent << "gesture_list[]" << std::endl;
    for (size_t i = 0; i < v.gesture_list.size(); ++i)
    {
      s << indent << "  gesture_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::leap_motion::Gesture_<ContainerAllocator> >::stream(s, indent + "    ", v.gesture_list[i]);
    }
    s << indent << "arm: ";
    s << std::endl;
    Printer< ::leap_motion::Arm_<ContainerAllocator> >::stream(s, indent + "  ", v.arm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEAP_MOTION_MESSAGE_HAND_H
