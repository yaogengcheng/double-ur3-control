# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from leap_motion/leapros.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class leapros(genpy.Message):
  _md5sum = "e37447f7532c765d6c587f418fd5dd03"
  _type = "leap_motion/leapros"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """##################################################
## Deprecated and will be removed in the future ##
##################################################

Header header
geometry_msgs/Vector3 direction
geometry_msgs/Vector3 normal
geometry_msgs/Point palmpos
geometry_msgs/Vector3 ypr
geometry_msgs/Point thumb_metacarpal
geometry_msgs/Point thumb_proximal
geometry_msgs/Point thumb_intermediate
geometry_msgs/Point thumb_distal
geometry_msgs/Point thumb_tip
geometry_msgs/Point index_metacarpal
geometry_msgs/Point index_proximal
geometry_msgs/Point index_intermediate
geometry_msgs/Point index_distal
geometry_msgs/Point index_tip
geometry_msgs/Point middle_metacarpal
geometry_msgs/Point middle_proximal
geometry_msgs/Point middle_intermediate
geometry_msgs/Point middle_distal
geometry_msgs/Point middle_tip
geometry_msgs/Point ring_metacarpal
geometry_msgs/Point ring_proximal
geometry_msgs/Point ring_intermediate
geometry_msgs/Point ring_distal
geometry_msgs/Point ring_tip
geometry_msgs/Point pinky_metacarpal
geometry_msgs/Point pinky_proximal
geometry_msgs/Point pinky_intermediate
geometry_msgs/Point pinky_distal
geometry_msgs/Point pinky_tip


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','direction','normal','palmpos','ypr','thumb_metacarpal','thumb_proximal','thumb_intermediate','thumb_distal','thumb_tip','index_metacarpal','index_proximal','index_intermediate','index_distal','index_tip','middle_metacarpal','middle_proximal','middle_intermediate','middle_distal','middle_tip','ring_metacarpal','ring_proximal','ring_intermediate','ring_distal','ring_tip','pinky_metacarpal','pinky_proximal','pinky_intermediate','pinky_distal','pinky_tip']
  _slot_types = ['std_msgs/Header','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Point','geometry_msgs/Vector3','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,direction,normal,palmpos,ypr,thumb_metacarpal,thumb_proximal,thumb_intermediate,thumb_distal,thumb_tip,index_metacarpal,index_proximal,index_intermediate,index_distal,index_tip,middle_metacarpal,middle_proximal,middle_intermediate,middle_distal,middle_tip,ring_metacarpal,ring_proximal,ring_intermediate,ring_distal,ring_tip,pinky_metacarpal,pinky_proximal,pinky_intermediate,pinky_distal,pinky_tip

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(leapros, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.direction is None:
        self.direction = geometry_msgs.msg.Vector3()
      if self.normal is None:
        self.normal = geometry_msgs.msg.Vector3()
      if self.palmpos is None:
        self.palmpos = geometry_msgs.msg.Point()
      if self.ypr is None:
        self.ypr = geometry_msgs.msg.Vector3()
      if self.thumb_metacarpal is None:
        self.thumb_metacarpal = geometry_msgs.msg.Point()
      if self.thumb_proximal is None:
        self.thumb_proximal = geometry_msgs.msg.Point()
      if self.thumb_intermediate is None:
        self.thumb_intermediate = geometry_msgs.msg.Point()
      if self.thumb_distal is None:
        self.thumb_distal = geometry_msgs.msg.Point()
      if self.thumb_tip is None:
        self.thumb_tip = geometry_msgs.msg.Point()
      if self.index_metacarpal is None:
        self.index_metacarpal = geometry_msgs.msg.Point()
      if self.index_proximal is None:
        self.index_proximal = geometry_msgs.msg.Point()
      if self.index_intermediate is None:
        self.index_intermediate = geometry_msgs.msg.Point()
      if self.index_distal is None:
        self.index_distal = geometry_msgs.msg.Point()
      if self.index_tip is None:
        self.index_tip = geometry_msgs.msg.Point()
      if self.middle_metacarpal is None:
        self.middle_metacarpal = geometry_msgs.msg.Point()
      if self.middle_proximal is None:
        self.middle_proximal = geometry_msgs.msg.Point()
      if self.middle_intermediate is None:
        self.middle_intermediate = geometry_msgs.msg.Point()
      if self.middle_distal is None:
        self.middle_distal = geometry_msgs.msg.Point()
      if self.middle_tip is None:
        self.middle_tip = geometry_msgs.msg.Point()
      if self.ring_metacarpal is None:
        self.ring_metacarpal = geometry_msgs.msg.Point()
      if self.ring_proximal is None:
        self.ring_proximal = geometry_msgs.msg.Point()
      if self.ring_intermediate is None:
        self.ring_intermediate = geometry_msgs.msg.Point()
      if self.ring_distal is None:
        self.ring_distal = geometry_msgs.msg.Point()
      if self.ring_tip is None:
        self.ring_tip = geometry_msgs.msg.Point()
      if self.pinky_metacarpal is None:
        self.pinky_metacarpal = geometry_msgs.msg.Point()
      if self.pinky_proximal is None:
        self.pinky_proximal = geometry_msgs.msg.Point()
      if self.pinky_intermediate is None:
        self.pinky_intermediate = geometry_msgs.msg.Point()
      if self.pinky_distal is None:
        self.pinky_distal = geometry_msgs.msg.Point()
      if self.pinky_tip is None:
        self.pinky_tip = geometry_msgs.msg.Point()
    else:
      self.header = std_msgs.msg.Header()
      self.direction = geometry_msgs.msg.Vector3()
      self.normal = geometry_msgs.msg.Vector3()
      self.palmpos = geometry_msgs.msg.Point()
      self.ypr = geometry_msgs.msg.Vector3()
      self.thumb_metacarpal = geometry_msgs.msg.Point()
      self.thumb_proximal = geometry_msgs.msg.Point()
      self.thumb_intermediate = geometry_msgs.msg.Point()
      self.thumb_distal = geometry_msgs.msg.Point()
      self.thumb_tip = geometry_msgs.msg.Point()
      self.index_metacarpal = geometry_msgs.msg.Point()
      self.index_proximal = geometry_msgs.msg.Point()
      self.index_intermediate = geometry_msgs.msg.Point()
      self.index_distal = geometry_msgs.msg.Point()
      self.index_tip = geometry_msgs.msg.Point()
      self.middle_metacarpal = geometry_msgs.msg.Point()
      self.middle_proximal = geometry_msgs.msg.Point()
      self.middle_intermediate = geometry_msgs.msg.Point()
      self.middle_distal = geometry_msgs.msg.Point()
      self.middle_tip = geometry_msgs.msg.Point()
      self.ring_metacarpal = geometry_msgs.msg.Point()
      self.ring_proximal = geometry_msgs.msg.Point()
      self.ring_intermediate = geometry_msgs.msg.Point()
      self.ring_distal = geometry_msgs.msg.Point()
      self.ring_tip = geometry_msgs.msg.Point()
      self.pinky_metacarpal = geometry_msgs.msg.Point()
      self.pinky_proximal = geometry_msgs.msg.Point()
      self.pinky_intermediate = geometry_msgs.msg.Point()
      self.pinky_distal = geometry_msgs.msg.Point()
      self.pinky_tip = geometry_msgs.msg.Point()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_87d().pack(_x.direction.x, _x.direction.y, _x.direction.z, _x.normal.x, _x.normal.y, _x.normal.z, _x.palmpos.x, _x.palmpos.y, _x.palmpos.z, _x.ypr.x, _x.ypr.y, _x.ypr.z, _x.thumb_metacarpal.x, _x.thumb_metacarpal.y, _x.thumb_metacarpal.z, _x.thumb_proximal.x, _x.thumb_proximal.y, _x.thumb_proximal.z, _x.thumb_intermediate.x, _x.thumb_intermediate.y, _x.thumb_intermediate.z, _x.thumb_distal.x, _x.thumb_distal.y, _x.thumb_distal.z, _x.thumb_tip.x, _x.thumb_tip.y, _x.thumb_tip.z, _x.index_metacarpal.x, _x.index_metacarpal.y, _x.index_metacarpal.z, _x.index_proximal.x, _x.index_proximal.y, _x.index_proximal.z, _x.index_intermediate.x, _x.index_intermediate.y, _x.index_intermediate.z, _x.index_distal.x, _x.index_distal.y, _x.index_distal.z, _x.index_tip.x, _x.index_tip.y, _x.index_tip.z, _x.middle_metacarpal.x, _x.middle_metacarpal.y, _x.middle_metacarpal.z, _x.middle_proximal.x, _x.middle_proximal.y, _x.middle_proximal.z, _x.middle_intermediate.x, _x.middle_intermediate.y, _x.middle_intermediate.z, _x.middle_distal.x, _x.middle_distal.y, _x.middle_distal.z, _x.middle_tip.x, _x.middle_tip.y, _x.middle_tip.z, _x.ring_metacarpal.x, _x.ring_metacarpal.y, _x.ring_metacarpal.z, _x.ring_proximal.x, _x.ring_proximal.y, _x.ring_proximal.z, _x.ring_intermediate.x, _x.ring_intermediate.y, _x.ring_intermediate.z, _x.ring_distal.x, _x.ring_distal.y, _x.ring_distal.z, _x.ring_tip.x, _x.ring_tip.y, _x.ring_tip.z, _x.pinky_metacarpal.x, _x.pinky_metacarpal.y, _x.pinky_metacarpal.z, _x.pinky_proximal.x, _x.pinky_proximal.y, _x.pinky_proximal.z, _x.pinky_intermediate.x, _x.pinky_intermediate.y, _x.pinky_intermediate.z, _x.pinky_distal.x, _x.pinky_distal.y, _x.pinky_distal.z, _x.pinky_tip.x, _x.pinky_tip.y, _x.pinky_tip.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.direction is None:
        self.direction = geometry_msgs.msg.Vector3()
      if self.normal is None:
        self.normal = geometry_msgs.msg.Vector3()
      if self.palmpos is None:
        self.palmpos = geometry_msgs.msg.Point()
      if self.ypr is None:
        self.ypr = geometry_msgs.msg.Vector3()
      if self.thumb_metacarpal is None:
        self.thumb_metacarpal = geometry_msgs.msg.Point()
      if self.thumb_proximal is None:
        self.thumb_proximal = geometry_msgs.msg.Point()
      if self.thumb_intermediate is None:
        self.thumb_intermediate = geometry_msgs.msg.Point()
      if self.thumb_distal is None:
        self.thumb_distal = geometry_msgs.msg.Point()
      if self.thumb_tip is None:
        self.thumb_tip = geometry_msgs.msg.Point()
      if self.index_metacarpal is None:
        self.index_metacarpal = geometry_msgs.msg.Point()
      if self.index_proximal is None:
        self.index_proximal = geometry_msgs.msg.Point()
      if self.index_intermediate is None:
        self.index_intermediate = geometry_msgs.msg.Point()
      if self.index_distal is None:
        self.index_distal = geometry_msgs.msg.Point()
      if self.index_tip is None:
        self.index_tip = geometry_msgs.msg.Point()
      if self.middle_metacarpal is None:
        self.middle_metacarpal = geometry_msgs.msg.Point()
      if self.middle_proximal is None:
        self.middle_proximal = geometry_msgs.msg.Point()
      if self.middle_intermediate is None:
        self.middle_intermediate = geometry_msgs.msg.Point()
      if self.middle_distal is None:
        self.middle_distal = geometry_msgs.msg.Point()
      if self.middle_tip is None:
        self.middle_tip = geometry_msgs.msg.Point()
      if self.ring_metacarpal is None:
        self.ring_metacarpal = geometry_msgs.msg.Point()
      if self.ring_proximal is None:
        self.ring_proximal = geometry_msgs.msg.Point()
      if self.ring_intermediate is None:
        self.ring_intermediate = geometry_msgs.msg.Point()
      if self.ring_distal is None:
        self.ring_distal = geometry_msgs.msg.Point()
      if self.ring_tip is None:
        self.ring_tip = geometry_msgs.msg.Point()
      if self.pinky_metacarpal is None:
        self.pinky_metacarpal = geometry_msgs.msg.Point()
      if self.pinky_proximal is None:
        self.pinky_proximal = geometry_msgs.msg.Point()
      if self.pinky_intermediate is None:
        self.pinky_intermediate = geometry_msgs.msg.Point()
      if self.pinky_distal is None:
        self.pinky_distal = geometry_msgs.msg.Point()
      if self.pinky_tip is None:
        self.pinky_tip = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 696
      (_x.direction.x, _x.direction.y, _x.direction.z, _x.normal.x, _x.normal.y, _x.normal.z, _x.palmpos.x, _x.palmpos.y, _x.palmpos.z, _x.ypr.x, _x.ypr.y, _x.ypr.z, _x.thumb_metacarpal.x, _x.thumb_metacarpal.y, _x.thumb_metacarpal.z, _x.thumb_proximal.x, _x.thumb_proximal.y, _x.thumb_proximal.z, _x.thumb_intermediate.x, _x.thumb_intermediate.y, _x.thumb_intermediate.z, _x.thumb_distal.x, _x.thumb_distal.y, _x.thumb_distal.z, _x.thumb_tip.x, _x.thumb_tip.y, _x.thumb_tip.z, _x.index_metacarpal.x, _x.index_metacarpal.y, _x.index_metacarpal.z, _x.index_proximal.x, _x.index_proximal.y, _x.index_proximal.z, _x.index_intermediate.x, _x.index_intermediate.y, _x.index_intermediate.z, _x.index_distal.x, _x.index_distal.y, _x.index_distal.z, _x.index_tip.x, _x.index_tip.y, _x.index_tip.z, _x.middle_metacarpal.x, _x.middle_metacarpal.y, _x.middle_metacarpal.z, _x.middle_proximal.x, _x.middle_proximal.y, _x.middle_proximal.z, _x.middle_intermediate.x, _x.middle_intermediate.y, _x.middle_intermediate.z, _x.middle_distal.x, _x.middle_distal.y, _x.middle_distal.z, _x.middle_tip.x, _x.middle_tip.y, _x.middle_tip.z, _x.ring_metacarpal.x, _x.ring_metacarpal.y, _x.ring_metacarpal.z, _x.ring_proximal.x, _x.ring_proximal.y, _x.ring_proximal.z, _x.ring_intermediate.x, _x.ring_intermediate.y, _x.ring_intermediate.z, _x.ring_distal.x, _x.ring_distal.y, _x.ring_distal.z, _x.ring_tip.x, _x.ring_tip.y, _x.ring_tip.z, _x.pinky_metacarpal.x, _x.pinky_metacarpal.y, _x.pinky_metacarpal.z, _x.pinky_proximal.x, _x.pinky_proximal.y, _x.pinky_proximal.z, _x.pinky_intermediate.x, _x.pinky_intermediate.y, _x.pinky_intermediate.z, _x.pinky_distal.x, _x.pinky_distal.y, _x.pinky_distal.z, _x.pinky_tip.x, _x.pinky_tip.y, _x.pinky_tip.z,) = _get_struct_87d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_87d().pack(_x.direction.x, _x.direction.y, _x.direction.z, _x.normal.x, _x.normal.y, _x.normal.z, _x.palmpos.x, _x.palmpos.y, _x.palmpos.z, _x.ypr.x, _x.ypr.y, _x.ypr.z, _x.thumb_metacarpal.x, _x.thumb_metacarpal.y, _x.thumb_metacarpal.z, _x.thumb_proximal.x, _x.thumb_proximal.y, _x.thumb_proximal.z, _x.thumb_intermediate.x, _x.thumb_intermediate.y, _x.thumb_intermediate.z, _x.thumb_distal.x, _x.thumb_distal.y, _x.thumb_distal.z, _x.thumb_tip.x, _x.thumb_tip.y, _x.thumb_tip.z, _x.index_metacarpal.x, _x.index_metacarpal.y, _x.index_metacarpal.z, _x.index_proximal.x, _x.index_proximal.y, _x.index_proximal.z, _x.index_intermediate.x, _x.index_intermediate.y, _x.index_intermediate.z, _x.index_distal.x, _x.index_distal.y, _x.index_distal.z, _x.index_tip.x, _x.index_tip.y, _x.index_tip.z, _x.middle_metacarpal.x, _x.middle_metacarpal.y, _x.middle_metacarpal.z, _x.middle_proximal.x, _x.middle_proximal.y, _x.middle_proximal.z, _x.middle_intermediate.x, _x.middle_intermediate.y, _x.middle_intermediate.z, _x.middle_distal.x, _x.middle_distal.y, _x.middle_distal.z, _x.middle_tip.x, _x.middle_tip.y, _x.middle_tip.z, _x.ring_metacarpal.x, _x.ring_metacarpal.y, _x.ring_metacarpal.z, _x.ring_proximal.x, _x.ring_proximal.y, _x.ring_proximal.z, _x.ring_intermediate.x, _x.ring_intermediate.y, _x.ring_intermediate.z, _x.ring_distal.x, _x.ring_distal.y, _x.ring_distal.z, _x.ring_tip.x, _x.ring_tip.y, _x.ring_tip.z, _x.pinky_metacarpal.x, _x.pinky_metacarpal.y, _x.pinky_metacarpal.z, _x.pinky_proximal.x, _x.pinky_proximal.y, _x.pinky_proximal.z, _x.pinky_intermediate.x, _x.pinky_intermediate.y, _x.pinky_intermediate.z, _x.pinky_distal.x, _x.pinky_distal.y, _x.pinky_distal.z, _x.pinky_tip.x, _x.pinky_tip.y, _x.pinky_tip.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.direction is None:
        self.direction = geometry_msgs.msg.Vector3()
      if self.normal is None:
        self.normal = geometry_msgs.msg.Vector3()
      if self.palmpos is None:
        self.palmpos = geometry_msgs.msg.Point()
      if self.ypr is None:
        self.ypr = geometry_msgs.msg.Vector3()
      if self.thumb_metacarpal is None:
        self.thumb_metacarpal = geometry_msgs.msg.Point()
      if self.thumb_proximal is None:
        self.thumb_proximal = geometry_msgs.msg.Point()
      if self.thumb_intermediate is None:
        self.thumb_intermediate = geometry_msgs.msg.Point()
      if self.thumb_distal is None:
        self.thumb_distal = geometry_msgs.msg.Point()
      if self.thumb_tip is None:
        self.thumb_tip = geometry_msgs.msg.Point()
      if self.index_metacarpal is None:
        self.index_metacarpal = geometry_msgs.msg.Point()
      if self.index_proximal is None:
        self.index_proximal = geometry_msgs.msg.Point()
      if self.index_intermediate is None:
        self.index_intermediate = geometry_msgs.msg.Point()
      if self.index_distal is None:
        self.index_distal = geometry_msgs.msg.Point()
      if self.index_tip is None:
        self.index_tip = geometry_msgs.msg.Point()
      if self.middle_metacarpal is None:
        self.middle_metacarpal = geometry_msgs.msg.Point()
      if self.middle_proximal is None:
        self.middle_proximal = geometry_msgs.msg.Point()
      if self.middle_intermediate is None:
        self.middle_intermediate = geometry_msgs.msg.Point()
      if self.middle_distal is None:
        self.middle_distal = geometry_msgs.msg.Point()
      if self.middle_tip is None:
        self.middle_tip = geometry_msgs.msg.Point()
      if self.ring_metacarpal is None:
        self.ring_metacarpal = geometry_msgs.msg.Point()
      if self.ring_proximal is None:
        self.ring_proximal = geometry_msgs.msg.Point()
      if self.ring_intermediate is None:
        self.ring_intermediate = geometry_msgs.msg.Point()
      if self.ring_distal is None:
        self.ring_distal = geometry_msgs.msg.Point()
      if self.ring_tip is None:
        self.ring_tip = geometry_msgs.msg.Point()
      if self.pinky_metacarpal is None:
        self.pinky_metacarpal = geometry_msgs.msg.Point()
      if self.pinky_proximal is None:
        self.pinky_proximal = geometry_msgs.msg.Point()
      if self.pinky_intermediate is None:
        self.pinky_intermediate = geometry_msgs.msg.Point()
      if self.pinky_distal is None:
        self.pinky_distal = geometry_msgs.msg.Point()
      if self.pinky_tip is None:
        self.pinky_tip = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 696
      (_x.direction.x, _x.direction.y, _x.direction.z, _x.normal.x, _x.normal.y, _x.normal.z, _x.palmpos.x, _x.palmpos.y, _x.palmpos.z, _x.ypr.x, _x.ypr.y, _x.ypr.z, _x.thumb_metacarpal.x, _x.thumb_metacarpal.y, _x.thumb_metacarpal.z, _x.thumb_proximal.x, _x.thumb_proximal.y, _x.thumb_proximal.z, _x.thumb_intermediate.x, _x.thumb_intermediate.y, _x.thumb_intermediate.z, _x.thumb_distal.x, _x.thumb_distal.y, _x.thumb_distal.z, _x.thumb_tip.x, _x.thumb_tip.y, _x.thumb_tip.z, _x.index_metacarpal.x, _x.index_metacarpal.y, _x.index_metacarpal.z, _x.index_proximal.x, _x.index_proximal.y, _x.index_proximal.z, _x.index_intermediate.x, _x.index_intermediate.y, _x.index_intermediate.z, _x.index_distal.x, _x.index_distal.y, _x.index_distal.z, _x.index_tip.x, _x.index_tip.y, _x.index_tip.z, _x.middle_metacarpal.x, _x.middle_metacarpal.y, _x.middle_metacarpal.z, _x.middle_proximal.x, _x.middle_proximal.y, _x.middle_proximal.z, _x.middle_intermediate.x, _x.middle_intermediate.y, _x.middle_intermediate.z, _x.middle_distal.x, _x.middle_distal.y, _x.middle_distal.z, _x.middle_tip.x, _x.middle_tip.y, _x.middle_tip.z, _x.ring_metacarpal.x, _x.ring_metacarpal.y, _x.ring_metacarpal.z, _x.ring_proximal.x, _x.ring_proximal.y, _x.ring_proximal.z, _x.ring_intermediate.x, _x.ring_intermediate.y, _x.ring_intermediate.z, _x.ring_distal.x, _x.ring_distal.y, _x.ring_distal.z, _x.ring_tip.x, _x.ring_tip.y, _x.ring_tip.z, _x.pinky_metacarpal.x, _x.pinky_metacarpal.y, _x.pinky_metacarpal.z, _x.pinky_proximal.x, _x.pinky_proximal.y, _x.pinky_proximal.z, _x.pinky_intermediate.x, _x.pinky_intermediate.y, _x.pinky_intermediate.z, _x.pinky_distal.x, _x.pinky_distal.y, _x.pinky_distal.z, _x.pinky_tip.x, _x.pinky_tip.y, _x.pinky_tip.z,) = _get_struct_87d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_87d = None
def _get_struct_87d():
    global _struct_87d
    if _struct_87d is None:
        _struct_87d = struct.Struct("<87d")
    return _struct_87d
